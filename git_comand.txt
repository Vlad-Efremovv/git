$ cat .git/config -> Посмотреть гид конфиг
$ git config --list -> Посмотреть все гид конфиги
$ git config --global user.email va.efremov@kscgroup.ru -> Установить глобальные настройки 
$ git config --global user.name E.V.A. -> Установить глобальные настройки 
$ git config --unset user.name -> Удалить из конфига поле
$ git config --remove-section user -> Удалить конфиг целиком
$ git config --global alias.c config -> Создать алиас для быстрой работы с гит

git status -> состояние git 
git add . -> добавить все не отслеживаемые файлы
git commit  -> сохранить изменения :q выход из редактора
git show -> Просмотр коммита
git reset HEAD <каталог> -> удалит из отслеживания 
git add -f (--forse) <каталог> -> Принудительно добавит файл
git commit -m "fix: 123" .gitignore -> сохранить только в файле .gitignore 
	(-am сохранит и закинет в гит изменения во сех знакомых директориях)

git rm -r <каталог> -> удалит из рабочей директории и из индекса отслеживания
git mw <каталог> <каталог> -> переименовать файл
	
	-r -> Удаление директории
	-f -> Удаление файлов с изменениями которые не были сохранены в репозитории
	--cached -> удаление файла из индекса

git branch -> покажет все ветки (-v покажет инфу о коммите)
git branch feature -> Создать новую ветку git
git checkout feature -> переключится на ветку 
	(git checkout -b feature ) -> Создаст и сразу переключится на новую ветку

git checkout -f HEAD -> Переключится на текущую ветку и удалить все изменения
git stash -> Сохранит измененный файлы во временном хранилище 
git stash pop -> Загрузить файлы из временного хранилища (можно вызывать на разных ветках)

git checkout -b fix -> Создаст новую ветку fix (на основе текущей) с изменениями и переключится на нее (можно переключаться между веткой мамой)
git branch -f master <хэш коммита> -> откатит ветку на текущий коммит
git branch -f master fix -> переместит состояние ветки мастер до ветки fix (смотрит по хешу)

git checkout -b Fox <хэш коммита> -> Создаст ветку на основе этого коммита
git checkout -B Fox <хэш коммита> -> передвинет ветку на текущий коммит

git checkout <хэш коммита> -> переключится на коммит
git checkout <хэш коммита> <файлы> -> возьмет состояние файла из выбранного коммита (если сделать git commit сохранит файл в репозитории)

git show master HEAD~ -> покажет перед последний коммит мастера (после ~ число шагов)
git show master HEAD~2:git_command.txt -> выведет изменения из файла в консоль (вместо файла можно ориентироваться на ветку)
git show :/branch -> найдет самый свежий коммит из всего репозитория 

git merge fix -> перенести изменения из ветки fix в текущую
git .git/ORIG_HEAD -> старый идентификатор ветки до merge
git branch -f master ORIG_HEAD -> вернут изменения до слияния
git checkout -B master fix -> передвинуть верку master к ветке fix
